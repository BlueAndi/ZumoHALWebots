@startuml HAL

package "HAL Interfaces" as halInterfaces {

    interface "IButton" as iButton {
        + {abstract} isPressed() : bool
        + {abstract} waitForRelease() : void
    }

    interface "IBuzzer" as iBuzzer {
        + {abstract} playFrequency(freq : uint16_t, duration : uin16_t, volume : uint8_t) : void
        + {abstract} playMelody(sequence : const char*) : void
        + {abstract} playMelodyPGM(sequence : const char*) : void
        + {abstract} isPlaying() : bool
        + {abstract} process() : void
    }

    interface "IDisplay" as iDisplay {
        + {abstract} clear() : void
        + {abstract} gotoXY(xCoord : uint8_t, yCoord : uint8_t) : void
        + {abstract} print(str : const String&) : size_t
        + {abstract} print(str : const char[]) : size_t
        + {abstract} print(value : uint8_t) : size_t
        + {abstract} print(value : uint16_t) : size_t
        + {abstract} print(value : uint32_t) : size_t
        + {abstract} print(value : int8_t) : size_t
        + {abstract} print(value : int16_t) : size_t
        + {abstract} print(value : int32_t) : size_t
    }

    interface "IEncoders" as iEncoders {
        + {abstract} getCountsLeft() : int16_t
        + {abstract} getCountsRight() : int16_t
        + {abstract} getCountsAndResetLeft() : int16_t
        + {abstract} getCountsAndResetRight() : int16_t
        + {abstract} getResolution() const : uint16_t
    }

    interface "IIMU" as iIMU {
        + {abstract} init() : bool
        + {abstract} enableDefault() : void
        + {abstract} configureForTurnSensin() : void
        + {abstract} readAccelerometer() : void
        + {abstract} readGyro() : void
        + {abstract} readMagnetometer() : void
        + {abstract} accelerometerDataReady() : bool
        + {abstract} gyroDataReady() : bool
        + {abstract} magnetometerDataReady() : bool
        + {abstract} getAccelerationValues(accelerationValues : IMUData*) const : void
        + {abstract} getTurnRates(turnRates : IMUData*) const : void
        + {abstract} getMagnetometerValues(magnetometerValues : IMUData*) const : void
        + {abstract} calibrate()
    }

    interface "ILed" as iLed {
        + {abstract} enable(enableIt : bool) : void
    }

    interface "ILineSensors" as iLineSensors {
        + {abstract} init() : void
        + {abstract} calibrate() : void
        + {abstract} readLine() : int16_t
        + {abstract} getSensorValues() : const uint16_t*
        + {abstract} isCalibrationSuccessful() : bool
        + {abstract} getCalibErrorInfo() const : uint8_t
        + {abstract} getNumLineSensors() const : uint8_t
        + {abstract} getSensorValueMax() const : uint16_t
        + {abstract} resetCalibration() : void
    }

    interface "IMotors" as iMotors {
        + {abstract} init() : void
        + {abstract} setSpeeds(leftSpeed : int16_t, rightSpeed : int16_t) : void
        + {abstract} getMaxSpeed() const : int16_t
        + {abstract} getLeftSpeed() const : int16_t
        + {abstract} getRightSpeed() const : int16_t
    }

    interface "IProximitySensors" as iProximitySensors {
        + {abstract} initFrontSensor() : void
        + {abstract} getNumSensors() const : uint8_t
        + {abstract} read() : void
        + {abstract} countsFrontWithLeftLeds() : uint8_t
        + {abstract} countsFrontWithRightLeds() : uint8_t
        + {abstract} getBrightnessLevels() : uint8_t
    }

    interface "ISender" as iSender {
        + {abstract} setChannel(channel : int32_t) : void
        + {abstract} send(data : const void*, size : size_t) const : void
        + {abstract} send(str : const char*) : void
    }

    interface "ISettings" as iSettings {
        + {abstract} init() : void
        + {abstract} getMaxSpeed() : int16_t
        + {abstract} setMaxSpeed(maxSpeed : int16_t) : void
    }

}

package "HAL Webots" as hal {

    class ButtonA
    class ButtonB
    class ButtonC
    class Buzzer
    class Display
    class Encoders
    class IMU
    class Keyboard
    class LedRed
    class LedYellow
    class LedGreen
    class LineSensors
    class Motors
    class ProximitySensors
    class Sender <<unused>>
    class Settings
    class SimTime
    class WebotsSerialDrv

    iButton <|... ButtonA: <<realize>>
    iButton <|... ButtonB: <<realize>>
    iButton <|... ButtonC: <<realize>>
    iBuzzer <|... Buzzer: <<realize>>
    iDisplay <|... Display: <<realize>>
    iEncoders <|... Encoders: <<realize>>
    iIMU <|... IMU: <<realize>>
    iLed <|... LedRed: <<realize>>
    iLed <|... LedYellow: <<realize>>
    iLed <|... LedGreen: <<realize>>
    iLineSensors <|... LineSensors: <<realize>>
    iMotors <|... Motors: <<realize>>
    iProximitySensors <|... ProximitySensors: <<realize>>
    iSender <|... Sender: <<realize>>
    iSettings <|... Settings: <<realize>>

    ButtonA --> Keyboard
    ButtonB --> Keyboard
    ButtonC --> Keyboard
}

package "Webots library" as webotsLib {
    
    class "Keyboard" as webotsKeyboard
    class "Speaker" as webotsSpeaker
    class "Display" as webotsDisplay
    class "PositionSensor" as webotsPositionSensor
    class "Accelerometer" as webotsAccelerometer
    class "Gyro" as webotsGyro
    class "Compass" as webotsCompass
    class "LED" as webotsLed
    class "Emitter" as webotsEmitter
    class "DistanceSensor" as webotsDistanceSensor
    class "Motor" as webotsMotor
    class "Robot" as webotsRobot
    class "Receiver" as webotsReceiver
}

note bottom of webotsLib
    Generated through build process.
    Requires a local Webots installation.
end note

package "ArduinoJson" as arduinoJson {
    class DynamicJsonDocument
}

halInterfaces -[hidden]-- hal
hal -[hidden]-- webotsLib
webotsLib -[hidden]r- arduinoJson

Keyboard ----> webotsKeyboard
Buzzer ----> webotsSpeaker
Display ----> webotsDisplay
Encoders ----> webotsPositionSensor
IMU ----> webotsAccelerometer
IMU ----> webotsGyro
IMU ----> webotsCompass
LedGreen ----> webotsLed
LedRed ----> webotsLed
LedYellow ----> webotsLed
LineSensors ----> webotsEmitter
LineSensors ----> webotsDistanceSensor
Motors *----> "2" webotsMotor
ProximitySensors *----> "2" webotsDistanceSensor
Sender ----> webotsEmitter
SimTime ----> webotsRobot
WebotsSerialDrv ----> webotsEmitter
WebotsSerialDrv ----> webotsReceiver

Settings ....> DynamicJsonDocument: <<use>>

note bottom of hal
    The hardware abstraction layer contains
    the realizations in form of the drivers.
end note

@enduml